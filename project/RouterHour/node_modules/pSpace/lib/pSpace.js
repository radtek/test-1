var os = require("os");
if(os.arch()=="x64"){
	addon= require('../build/x64/pSpace');
}else{
	addon = require('../build/win32/pSpace');
}
var emitter = require('events').EventEmitter;
var Util = require('util');
var pspace= new addon.Client();
var Err = addon.Error;

Util.inherits(ps, emitter);

function ps() {
  emitter.call(this);
  this.Err = Err;
}
ps.prototype.open = function(){
	var conStr = {
		"host":"localhost",
		"user":"admin",
		"password":"admin888",
		"port":8889
	};
	var args = arguments;
	if(args.length == 0){
		return pspace.connect(conStr);  //参数为空，使用同步默认连接
	}else {
		var fun = args[args.length-1];
		if(typeof fun == 'function'){
			if(args.length == 1){  //参数只有回调函数，使用异步默认连接
				args = conStr;
				return pspace.connect(args,function(err,con){
					fun(err,con);
				});	
			}else {
				if([2,4,5].indexOf(args.length) > -1){  //有回调时参数个数有3种情况符合条件
					if(2 == args.length){  //一个json+回调
						return pspace.connect(args[0],function(err,con){
							fun(err,con);
						});
					}else{  //直接传参+回调
						delete args[args.length - 1];
						var funStr = "pspace.connect('";
						for(var x in args){
							funStr += args[x];
							funStr += (x == args.length - 2 ? "'," : "','");
						}
						funStr += "function(err,con){fun(err,con);});";
						return eval(funStr); 
					}
				}else throw "The number of link pSpace Server parameters is wrong!";
			}
		}else{
			if([1,3,4].indexOf(args.length) >-1){  //无回调时参数个数有3种情况符合条件
				if(1 == args.length){  //一个json
					return pspace.connect(args[0]);
				}else{  //直接传参
					var funStr = "pspace.connect('";
					for(var x in args){
						funStr += args[x];
						funStr += (x == args.length - 1 ? "');" : "','");
					}
					return eval(funStr); 
				}
			}else throw "The number of link pSpace Server parameters is wrong!";
		} 
	}
/*
	if(cb!=null){
		pspace.connect(args,function(err,con){
			cb(err,con);
		});
	}else{
		return pspace.connect(args);
	}	
*/
}
ps.prototype.isConnected = function(){
	return pspace.isConnected();	
}

ps.prototype.Node = function(){
    this.tagType="node";
}

ps.prototype.Analog = function(){
    this.tagType = "analog";
    this.DataType = "DOUBLE";
}

ps.prototype.Digital = function(){
    this.tagType = "digital";
}

ps.prototype.String = function(){
    this.tagType = "string";
    this.DataType = "STRING";
}

/**********/
module.exports = ps;