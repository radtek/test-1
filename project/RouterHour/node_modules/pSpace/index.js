var conn = require("./lib/connectMgr.js");

//注册pSpace连接
//conn.RegConn("pSpace","localhost","admin","admin888");
exports.openConn = function(pSpaceName,address,user,password){
  return conn.RegConn(pSpaceName,address,user,password);
}

exports.closeConn = function(pSpaceName){
  return conn.RemConn(pSpaceName);
}

function getpSpaceName(longName){
  if(!(typeof longName == "string")){
    return undefined;
  }
  if(longName.indexOf("\\")>0){
    longName = longName.replace(/\\/g ,"/");
  }
  if(longName.indexOf("/")>0){
    return longName.substr(0,longName.indexOf("/"));
  }else{
    return undefined;
  }
}

exports.getConn = function(pSpaceName){
	return conn.GetConn(pSpaceName);
}
exports.getpSpaceName = getpSpaceName;
//断开pSpace连接
exports.remConn = function(pSpaceName){
	conn.RemConn(pSpaceName);
}

function getTagName(longName){
  if(!(typeof longName == "string")){
    return undefined;
  }
  if(longName.indexOf("\\")>0){
    longName = longName.replace(/\\/g ,"/");
  }
  if(longName.indexOf("/")>0){
    return longName.substr(longName.indexOf("/"));
  }else{
    return undefined;
  }
}

exports.isConnected = function(pSpaceName){
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return false;
  }
  
  if (pSpaceConn.isConnected()){
	   return true;
  }
  else{
	  return false;
  }
}

exports.openConnPro = function(){
	conn.ConnectProtection();
}
exports.closeConnPro = function(){
	conn.ClearConnectProtection();
}

//-----------------测点接口------------//

exports.addNode = function(longName){
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }
  var node = {
        TagType : "node"
  };
  var res = pSpaceConn.add(TagName,node);
  
  if(res.hasOwnProperty("errString")){
	  console.error("addNode error: ",res.errString);
  }else{
  	console.info("addNode success.");
  }
  return res;
}

exports.addAnalogTag = function(longName){
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
 
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }
  
  var analog = {
           TagType : "analog",
           DataType : "double"
  };
  var res = pSpaceConn.add(TagName,analog);
  
  if(res.hasOwnProperty("errString")){
	  console.error("addAnalogTag error: ",res.errString);
  }else{
  	console.info("addAnalogTag success.");
  }
  return res;
}

exports.addSwitchTag = function(longName){
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }
  var digital = {
         TagType : "digital",
         DataType : "BOOL"
  };
  
  var res = pSpaceConn.add(TagName,digital);
  
  if(res.hasOwnProperty("errString")){
	  console.error("addSwitchTag error: ",res.errString);
  }else{
  	console.info("addSwitchTag success.");
  }
  return res;
}

exports.addStringTag = function(longName){
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }
  var string = {
        TagType : "string",
        DataType : "STRING"
  };
  var res = pSpaceConn.add(TagName,string);
  
  if(res.hasOwnProperty("errString")){
	  console.error("addStringTag error: ",res.errString);
  }else{
  	console.info("addStringTag success.");
  }
  return res;
}

exports.setTagProps = function(longName,setProps){
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }
  
  var res = pSpaceConn.write(TagName+".props",setProps);
  
  if(res.hasOwnProperty("errString")){
	  console.error("setTagProps error: ",res.errString);
  }else{
  	console.info("setTagProps success.");
  }
  return res;
}

exports.setTagPropsAsy = function(longName,setProps,setTagPropsCallback){
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }
  
  var res = pSpaceConn.write(TagName+".props",setProps,setTagPropsCallback);
  
  return res;
}
exports.getTagProps = function(longName,props){
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }
  
  var res = pSpaceConn.read(TagName+".props",props);
  
  if(res.hasOwnProperty("errString")){
	  console.error("getTagProps error: ",res.errString);
  }else{
  	console.info("getTagProps success.");
  }
  return res;
}

exports.getTagPropsAsy = function(longName,props,getTagPropsCallback){
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }
  
  var res = pSpaceConn.read(TagName+".props",props,getTagPropsCallback);
  
  return res;
}

exports.delTag = function(longName){
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }
  
  var res = pSpaceConn.del(TagName);
  if(res.hasOwnProperty("errString")){
	  console.error("delTag error: ",res.errString);
  }else{
  	console.info("delTag success.");
  }
  return res;
}

//测点过滤
exports.queryTag = function(longName,condition){
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }
  
  var queryData = pSpaceConn.query(TagName,condition);
  if(queryData.hasOwnProperty("errString")){
	  console.error("queryTag error: ",queryData.errString);
  }else{
  	console.info("queryTag success.");
  }
  return queryData;
}

//-----------------实时接口------------//
//获取实时数据
exports.readReal = function(longName){
  
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }
  //读实时数据
  var realData = pSpaceConn.read(TagName+".pv");
  if(realData.hasOwnProperty("errString")){
	  console.error("readReal error: ",realData.errString);
  }else{
  	console.info("readReal success.");
  }
  return realData;
}
//获取实时数据异步
exports.readRealAsy = function(longName,ReadRealCallback){
  
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }
  
  var res = pSpaceConn.read(TagName + ".pv",ReadRealCallback);
  
  return res;
  
}
//批量获取实时数据
exports.readRealBatch = function(longNames){
	  var isTrue = 0;
    var pSpace2Tags = new Array();
    for(var i=0;i<longNames.length;i++){
      var pSpaceName =getpSpaceName(longNames[i]);
      var TagName = getTagName(longNames[i]) + ".pv";
      if(!(pSpaceName&&TagName)){
        return {code:-1,errString:"parameter invaild."};
      }
      var pSpaceConn = conn.GetConn(pSpaceName);
      if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
        return {code:-1,errString:"failed to connect to the data source."};
      }
      for(var j=0;j<pSpace2Tags.length;j++){
       if(pSpace2Tags[j].key==pSpaceName){    
         pSpace2Tags[j].value.tagNames.push(TagName);
         isTrue =1;
       }
      }
      if(isTrue == 0){
          var pSpace2Tag = new Object();
          pSpace2Tag.pSpaceConn = pSpaceConn;
          pSpace2Tag.tagNames = new Array(TagName);
          pSpace2Tags.push({key:pSpaceName,
                            value:pSpace2Tag});
          isTrue=0;
      }
    }
    var realDatas= new Array();
    for(i=0;i<pSpace2Tags.length;i++){
      var pSpaceConn1 = pSpace2Tags[i].value.pSpaceConn;
      var realData = pSpaceConn1.read(pSpace2Tags[i].value.tagNames);
	    realDats = realDatas.concat(realData);
    }
	return realDats;
}
//批量获取实时数据异步
exports.readRealBatchAsy = function(longNames,ReadRealBatchCallback){
	var isTrue = 0;
    var pSpace2Tags = new Array();
    for(var i=0;i<longNames.length;i++){
      var pSpaceName =getpSpaceName(longNames[i]);
      var TagName = getTagName(longNames[i]) + ".pv";
      if(!(pSpaceName&&TagName)){
        return {code:-1,errString:"parameter invaild."};
      }
      var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }
      for(var j=0;j<pSpace2Tags.length;j++){
       if(pSpace2Tags[j].key==pSpaceName){    
         pSpace2Tags[j].value.tagNames.push(TagName);
         isTrue =1;
       }
      }
      if(isTrue == 0){
          var pSpace2Tag = new Object();
          pSpace2Tag.pSpaceConn = pSpaceConn;
          pSpace2Tag.tagNames = new Array(TagName);
          pSpace2Tags.push({key:pSpaceName,
                            value:pSpace2Tag});
          isTrue=0;
      }
    }
    for(i=0;i<pSpace2Tags.length;i++){
      var pSpaceConn1 = pSpace2Tags[i].value.pSpaceConn;
      var res = pSpaceConn1.read(pSpace2Tags[i].value.tagNames,ReadRealBatchCallback);
    }

}
//写实时数据
exports.writeReal = function(longName,data){
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }
  
  var resWrite = pSpaceConn.write(TagName+".pv",data);
  if(resWrite.hasOwnProperty("errString")){
	  console.error("writeReal error:",resWrite.errString);
  }else{
  	console.info("writeReal success.");
  }
  return resWrite;
}
//写实时数据异步
exports.writeRealAsy = function(longName,data,writeRealCallback){
  
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }

  var resAsy = pSpaceConn.write(TagName+".pv",data,writeRealCallback); 
  
  return resAsy;
}
//批量写实时同步
exports.writeRealBatch = function(longNames,datas){
	if(longNames.length !=  datas.length){
		return {code:-1,errString:"parameter invaild."};
	}
	var isTrue = 0;
	var pSpace2RealDatas = new Array();
	//pSpace2RealData结果
	// [{"key": pSpaceConn, 
	//	 "value": {
	//		"tagName.pv":data,
	//	 {
	//	}]
	for(var i=0;i<longNames.length;i++){
	  var pSpaceName =getpSpaceName(longNames[i]);
      var TagName = getTagName(longNames[i]);
	   if(!(pSpaceName&&TagName)){
        return {code:-1,errString:"parameter invaild."};
      }
	  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }
	  for(var j=0;j<pSpace2RealDatas.length;j++){
       if(pSpace2RealDatas[j].key==pSpaceConn){    
         pSpace2RealDatas[j].value[TagName+".pv"]=datas[i];
         isTrue =1;
       }
      }
      if(isTrue == 0){
          var realData = new Object();
		  realData[TagName+".pv"]=datas[i];
          pSpace2RealDatas.push({key:pSpaceConn,
                            value:realData});
          isTrue=0;
      }
	} 
	 for(var i=0;i<pSpace2RealDatas.length;i++){
      var pSpaceConn1 = pSpace2RealDatas[i].key;
      var res = pSpaceConn1.write(pSpace2RealDatas[i].value);
    }
}
//测点实时数据订阅
exports.realDataSub = function(longNames,realDataSubCallback){
    
    var isTrue = 0;
    var pSpace2Tags = new Array();
    for(var i=0;i<longNames.length;i++){
      var pSpaceName =getpSpaceName(longNames[i]);
      var TagName = getTagName(longNames[i]);
      if(!(pSpaceName&&TagName)){
        return {code:-1,errString:"parameter invaild."};
      }
      var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }
      for(var j=0;j<pSpace2Tags.length;j++){
       if(pSpace2Tags[j].key==pSpaceName){    
         pSpace2Tags[j].value.tagNames.push(TagName);
         isTrue =1;
       }
      }
      if(isTrue == 0){
          var pSpace2Tag = new Object();
          pSpace2Tag.pSpaceConn = pSpaceConn;
          pSpace2Tag.tagNames = new Array(TagName);
          pSpace2Tags.push({key:pSpaceName,
                            value:pSpace2Tag});
          isTrue=0;
      }
    }
    //pSpace2Tags结果
	//[ { "key": pSpaceName, 
	//   "value": { 
	//				"pSpaceConn": pSpaceConn,
	//				"tagNames": [tagName..] 
	// 			  } 
	//	} ]
	
    for(var i=0;i<pSpace2Tags.length;i++){
      var pSpaceConn1 = pSpace2Tags[i].value.pSpaceConn;
      var res = pSpaceConn1.sub(pSpace2Tags[i].value.tagNames,realDataSubCallback);
    }
}
//-----------------历史接口------------//
//插入历史
exports.insertHis = function(longName,data){
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }
  
  var resInsert = pSpaceConn.write(TagName+ ".his.insert",data);
  
   if(resInsert.hasOwnProperty("errString")){
	  console.error("insertHis error:",resInsert.errString);
  }else{
  	console.info("insertHis success.");
  }
  return resInsert;
}
//插入历史异步
exports.insertHisAsy = function(longName,data,insertHisCallback){
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }
  
  var resInsertAsy = pSpaceConn.write(TagName+ ".his.insert",data,insertHisCallback);
  
  return resInsertAsy;
}

//读取时间点历史
exports.readHisAtTime = function(longName,times){
  
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }

  var resAtTime = pSpaceConn.read(TagName+ ".his.atTime",times);
  
  if(resAtTime.hasOwnProperty("errString")){
	  console.error("readHisAtTime error:",resAtTime.errString);
  }else{
  	console.info("readHisAtTime success.");
  }
  return resAtTime;
}

//读取时间点历史异步
exports.readHisAtTimeAsy = function(longName,times,readHisAtTimeCallback){
  
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }

  var res = pSpaceConn.read(TagName+ ".his.atTime",times,readHisAtTimeCallback);
  
  return res;
}

//读取时间段历史
exports.readHisRaw = function(longName,startTime,endTime,isBound,maxReNum){
  
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }

  var resRaw = pSpaceConn.read(TagName+ ".his.raw",startTime,endTime,isBound,maxReNum);
  
  if(resRaw.hasOwnProperty("errString")){
	  console.error("readHisRaw error:",resRaw.errString);
  }else{
  	console.info("readHisRaw success.");
  }
  return resRaw;
}

//读取时间段历史异步
exports.readHisRawAsy = function(longName,startTime,endTime,isBound,readHisRawCallback){

  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }

  var res = pSpaceConn.read(TagName+ ".his.raw",startTime,endTime,isBound,readHisRawCallback);
  
  return res;
}

//读取历史统计数据
exports.readHisProcessed = function(longName,hisPro){
  
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }

  var resHisPro = pSpaceConn.read(TagName+ ".his.processed",hisPro);
  
  if(resHisPro.hasOwnProperty("errString")){
	  console.error("readHisProcessed error:",resHisPro.errString);
  }else{
  	console.info("readHisProcessed success.");
  }
  return resHisPro;
}

//读取历史统计数据异步
exports.readHisProcessedAsy = function(longName,hisPro,readHisProcessedCallback){

  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }

  var res = pSpaceConn.read(TagName+ ".his.processed",hisPro,readHisProcessedCallback);
  
  return res;
}


//读取实时报警数据
exports.readRealAlarm = function(longName,filterField,filter){
  
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }

  var resRealAlarm = pSpaceConn.read(TagName+ ".alarm.real",filterField,filter);
  
  if(resRealAlarm.hasOwnProperty("errString")){
	  console.error("readRealAlarm error:",resRealAlarm.errString);
  }else{
  	console.info("readRealAlarm success.");
  }
  return resRealAlarm;
}
//读取实时报警数据异步
exports.readRealAlarmAsy = function(longName,filterField,filter,readRealAlarmCallback){
  
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }

  var res = pSpaceConn.read(TagName+ ".alarm.real",filterField,filter,readRealAlarmCallback);
  
  return res;
}
//查询历史报警
exports.readHisAlarm = function(longName,filterField,filter,startTime,endTime){
  
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }

  var resHisAlarm = pSpaceConn.read(TagName+ ".alarm.his",filterField,filter,startTime,endTime);
  
  if(resHisAlarm.hasOwnProperty("errString")){
	  console.error("readHisAlarm error:",resHisAlarm.errString);
  }else{
  	console.info("readHisAlarm success.");
  }
  return resHisAlarm;
}
//查询历史报警异步
exports.readHisAlarmAsy = function(longName,filterField,filter,startTime,endTime,readHisAlarmCallback){
  
  var pSpaceName =getpSpaceName(longName);
  var TagName = getTagName(longName);
  if(!(pSpaceName&&TagName)){
    return {code:-1,errString:"parameter invaild."};
  }
  var pSpaceConn = conn.GetConn(pSpaceName);
  if(!pSpaceConn || pSpaceConn.hasOwnProperty("errString")){
    return {code:-1,errString:"failed to connect to the data source."};
  }

  var res = pSpaceConn.read(TagName+ ".alarm.his",filterField,filter,startTime,endTime,readHisAlarmCallback);
  
  return res;
}