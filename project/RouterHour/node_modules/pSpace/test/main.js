var pSpace = require("./pSpaceFun")

//注册pSpace连接信息
pSpace.regConn("pSpace","localhost","admin","admin888");

//创建测点
pSpace.addNode("pSpace/addNode");
pSpace.addAnalogTag("pSpace/addAnalogTag");
pSpace.addSwitchTag("pSpace/addSwitchTag");
pSpace.addStringTag("pSpace/addStringTag");
pSpace.delTag("pSpace/addStringTag");

//读取实时数据
var realData = pSpace.readReal("pSpace/tag/tag2");

if(realData.hasOwnProperty("errString")){
    //console.log("readReal error: ",readData.errString);
	  //console.log("readReal error: ",readData.errString);
  }else{
  	console.log("readReal success.");
  	console.log(realData);
  }
  
//异步读取实时
var readRealCallback = function(err,tagName,pv){
	if(err){
		console.log("readRealAsy error: ",err);
	}else{
	  console.log("readRealAsy success.");
		console.log(pv);
	}
};
pSpace.readRealAsy("pSpace/tag/tag2",readRealCallback);

//批量获取实时数据
var realDatas = pSpace.readRealBatch(["pSpace/tag/tag1","pSpace/tag/tag2"]);

if(realDatas.hasOwnProperty("errString")){
	  console.log("readRealBatch error: ",realDatas.errString);
  }else{
  	console.log("readRealBatch success.");
	console.log(realDatas);
  }

//批量获取实时数据异步
var ReadRealBatchCallback = function(err,pv){
	if(err){
		console.log("readRealBatchAsy error: ",err);
	}else{
	  console.log("readRealBatchAsy success.");
		console.log(pv);
	}
};
pSpace.readRealBatchAsy(["pSpace/tag/tag1","pSpace/tag/tag2"],ReadRealBatchCallback);
//写实时数据
var data  = {
	"value":67.001,
	"quality":0,
	"time":new Date()
};
pSpace.writeReal("pSpace/tag/tag2",data);

//异步写实时数据
var data1  = {
	"value":90.001,
	"quality":0,
	"time":new Date()
};
var writeRealCallback = function(err,tagName){
	if(err){
		console.log(err);
	}else{
		console.log(tagName,"writeRealAsy success.");
	}
};
pSpace.writeRealAsy("pSpace/tag/tag2",data1,writeRealCallback);

//批量写实时同步
var data3  = {
	"value":90.001,
	"quality":0,
	"time":new Date()
};
pSpace.writeRealBatch(["pSpace/tag/tag2","pSpace/tag/tag1","pSpace/tag/tag3"],[data3,data3,data3]);

//实时数据订阅
var realDataSubCallback = function(err,subid,curval,val){
    if(err){
        console.log(err);
    }
    else{
        console.log(subid);
        if(curval){
          console.log("当前值：",curval);
        }
        if(val){
          console.log("订阅值：",val);
        }
     }
}
pSpace.realDataSub(["pSpace/tag/tag2","pSpace/tag/tag1","pSpace/tag/tag3", ],realDataSubCallback);

//插入历史数据
var data2  = {
	"value":89.001,
	"quality":0,
	"time":new Date()
};

var resInsert = pSpace.insertHis("pSpace/tag/tag2",data2);

if(resInsert.hasOwnProperty("errString")){
	  console.log("insertHis error:",resInsert.errString);
  }else{
  	console.log("insertHis success.");
  }

//插入历史数据异步
var data3  = {
	"value":89.001,
	"quality":232,
	"time":new Date()
};

var insertHisCallback = function(err,tagName,tagID){
	if(err){
		console.log(err);
	}else {
		console.log(tagName);
		console.log(tagID);
	}
};
pSpace.insertHisAsy("pSpace/tag/tag2",data3,insertHisCallback);

//获取历史数据
var resAtTime = pSpace.readHisAtTime("pSpace/tag/tag2",[new Date()]);

if(resAtTime.hasOwnProperty("errString")){
	  console.log("readHis error:",resAtTime.errString);
  }else{
  	console.log("readHis success.");
  	for(i=0;i<resAtTime.length;i++){
      console.log(resAtTime[i]);
    }
  }

//获取历史数据异步
var readHisAtTimeCallback = function(err,hisArray){  
	if(err){
		console.log(err);
	}else {
		console.log(hisArray);
	}
};
pSpace.readHisAtTimeAsy("pSpace/tag/tag2",[new Date()],readHisAtTimeCallback);

//读取时间段历史
var resRaw = pSpace.readHisRaw("pSpace/tag/tag2",new Date(0),new Date(),1);

if(resRaw.hasOwnProperty("errString")){
	  console.log("readHisRaw error:",resRaw.errString);
  }else{
  	console.log("readHisRaw success.");
  	console.log(resRaw);
  }
 
//读取时间段历史异步
var readHisRawCallback = function(err,hisArray){  
	if(err){
		console.log(err);
	}else {
		console.log(hisArray);
	}
};
pSpace.readHisRawAsy("pSpace/tag/tag2",new Date(0),new Date(),1,readHisRawCallback);
