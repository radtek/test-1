var url = require('url');
var fs = require('fs');
//处理文件夹
function dealWithFile(pathname,res)
{
	fs.readdir(pathname,function(err,files){
		if(err){
			res.writeHead(404, {'Content-Type': 'text/plain'}); 
            res.write("This request URL was not found on this server."); 
            res.end();
		}else{
			var data = [];
			files.forEach(function(item){
				var tmpPath = pathname + '/' + item; 
				 var pointPosition = tmpPath.lastIndexOf('.');
  			 var mmieString = tmpPath.substring(pointPosition+1);
  				 if('json'===mmieString){
  				 	//data.push(fs.readFileSync(tmpPath));
  				 	var tmpData = fs.readFileSync(tmpPath);
  				 	if(tmpData.length>0){
  				 		var jsObj = JSON.parse(tmpData);
						data.push(jsObj);
  				 	}
  				 }
			});
			res.send(data);
      res.statusCode = 200;
      //res.end();  
		}
	});
}
//写文件
function writeConfig(pathname,realPath,req,res)
{
	realPath = realPath .replace(/\\/g,"\/");
    var pointPosition = pathname.lastIndexOf('.');
    var mmieString = pathname.substring(pointPosition+1);
    realPath = realPath.replace(/.write/g,".json");
    //查看是否有这个json文件，没有就创建
    fs.exists(realPath,function(exists){
    	if(!exists){
    		var position = realPath.lastIndexOf('\/');
            var filePath = realPath.substring(0,position);
            fs.exists(realPath,function(exists){
            	if(!exists){
            		//如果文件夹所在的目录存在，创建文件夹
                var p1 = filePath.lastIndexOf('\/');
                var upFilePath = filePath.substring(0,p1);
                fs.exists(upFilePath,function(exist){
                  if(!exist){
                    res.statusCode = 405;
                    res.end();
                    console.log("write fail");
                  }else{
                    fs.mkdirSync(filePath);
                    fs.writeFile(realPath, JSON.stringify(req.query), function(err){  
                      if(err){
                        res.statusCode = 405;
                        res.end();
                        console.log("write fail");
                      }else{
                         res.statusCode = 200;
                         res.send({"code":true});
                         res.end();  
                      }      
                   });  
                  }
                });
            		
            	}else{
            		fs.writeFile(realPath, JSON.stringify(req.query), function(err){  
				        if(err){
				        	res.statusCode = 405;
				        	res.end();
				        	console.log("write fail ");
				        }else{
                  res.statusCode = 200;
                  res.send({"code":true});
                  res.end();  
                }  
			           		 
		    		});  
            	}
            });
    		
    	}else{
    		var tmpData = fs.readFileSync(realPath);
    		var reqData = req.query;
    		var jsObj = JSON.parse(tmpData);
    		if(tmpData.length>0){
    			var keys = Object.keys(reqData);
    			for(var i=0;i<keys.length;i++){
    				jsObj[keys[i]] = reqData[keys[i]];
    			}
    			fs.writeFile(realPath,JSON.stringify(jsObj),function(err){
        			if(err){
                res.statusCode = 405;
                res.end();
              }else{
                res.statusCode = 200;
                res.send({"code":true});
                res.end();
              }
    			});
    		}else{
    			fs.writeFile(realPath,JSON.stringify(reqData),function(err){
        			if(err){
                res.statusCode = 405;
                res.end();
              }else{
                res.statusCode = 200;
                res.send({"code":true});
                res.end(); 
              }
    			});
    		}
    		
    	}
    });

}
//配置文件读处理 
function dealWithConfig(pathname,realPath,res)
{
    realPath = realPath .replace(/\\/g,"\/");
    var pointPosition = pathname.lastIndexOf('.');
    var mmieString = pathname.substring(pointPosition+1);
    realPath = realPath.replace(/.read/g,".json");
    //先查看文件是否为一个json配置文件
    fs.exists(realPath,function(exists){
        if(!exists){
        	//请求的url不是一个json文件，那么判断是否存在这样一个请求的文件夹
        	var position = realPath.lastIndexOf('.');
        	var p = realPath.substring(0,position);//file/config
        	fs.exists(p,function(exists){
        		if(!exists){
        			//文件夹不存在
              res.statusCode = 404;
        			res.writeHead(404, {'Content-Type': 'text/plain'}); 
           		    res.write("This request URL " + pathname + " was not found on this server."); 
           		    res.end();
        		}else{
        			var stat = fs.statSync(p);
        			if(stat.isDirectory()&&'read'===mmieString){
        				//对文件夹处理并返回数据
        				dealWithFile(p,res);
        			}else{
        				//错误
                res.statusCode = 404;
        				res.writeHead(404,{'Content-Type': 'text/plain'}); 
           		  res.write("This request URL was not found on this server."); 
           		  res.end();
        			}

        		}
        	});
        }else{
        	
        	var stat = fs.statSync(realPath);
          	//请求的是是否一个json文件还是文件夹
          	if(stat.isFile()){
          		//判断是否为读数据
          		if('read'===mmieString){
          			//对文件处理并返回数据
          			var tmpData = fs.readFileSync(realPath);
          			if(tmpData.length>0){
          				res.send(tmpData);
                  res.statusCode = 200;
                  res.end();
          			}else{
          				//请求错误
          				res.statusCode = 501;
          				res.end();
          			}
          			
          		}else{
          			//错误
                res.statusCode = 404;
          			res.writeHead(404, {'Content-Type': 'text/plain'}); 
           		  res.write("This request  was not found on this server."); 
           		  res.end();
          		}
          		
          	}else if(stat.isDirectory() && 'read'===mmieString){
          		//对文件夹处理并返回数据
          		dealWithFile(realPath,res);
          	}else{
          		//错误
              res.statusCode = 404;
          		res.writeHead(404, {'Content-Type': 'text/plain'}); 
           		res.write("This request  was not found on this server."); 
           		res.end();
          	}
        }     
    });

}

module.exports.dealWithFile = dealWithFile;
module.exports.dealWithConfig = dealWithConfig;
module.exports.writeConfig = writeConfig;