var assert = require( 'assert' );
var async = require('async');
var util = require( 'util' );
var writeDebugComments = false;
var dataComparisonFailed = "Results do not match expected values";
//   non-optional message 
function errorComments(Message) {
    console.log(Message);
};

//   optional debugging information
function debugComments(Message) {
    if (writeDebugComments == true)
        errorComments(Message);
};

function dataComparisonFailedMessage(expected, actual, done) {
    errorComments("\nExpected: \n" + util.inspect(expected));
    errorComments("\nReceived: \n" + util.inspect(actual));
    done(new Error("\nxxxTEST FAILED"));
};
function Appendzero(obj)
{
     if(obj<10) return "0" +""+ obj;
     else return obj;     
}
var formatDate = function(now){
    var   year=now.getFullYear();     
    var   month=now.getMonth()+1;     
    var   date=now.getDate();     
    var   hour=now.getHours();     
    var   minute=now.getMinutes();    
    var   second=now.getSeconds(); 
    //var   milSecond = now.getMilliseconds(); 
    //console.log("milsecond:",milSecond);    
    return   year+"-"+Appendzero(month)+"-"+Appendzero(date)+" "+Appendzero(hour)+":"+Appendzero(minute)+":"+Appendzero(second);     
}
function compoundQueryTSQL(Connection, tsql,len,ExpectedData,done) {
    var NewExpectedData = ExpectedData;
    var called = 0;
    //console.time("insert");
    Connection.queryRaw(tsql, [], function (e, r, more) {
        if(e){
            done(e);
        }else{
            ++called;
            if (more) {
                try {
                    assert.deepEqual(r, NewExpectedData, dataComparisonFailed);
                }
                catch (assert) {
                    dataComparisonFailedMessage(NewExpectedData, r, done);
                    return;
                }
            }
            else {
                try {
                    assert.deepEqual(r, NewExpectedData, dataComparisonFailed);
                }
                catch (assert) {
                    dataComparisonFailedMessage(NewExpectedData, r, done);
                    return;
                }
            }
            if (called > len-1) {
                done();
            }
        }
        
    });
}

function execQuerySql(Connection,sql,done){
    Connection.queryRaw(sql,function(err){
        if(err){
            done(err);
        }else{
            done();
        }
    });
}

function insertData(Connection,ps_data,table_name,sql_tagname,logger,done){
    Connection.beginTransaction(function(err){
        if(err){
            done(err);
        }else{
            async.series( [
                function( done ) { 
                    if(ps_data.length!=0){
                        var tSql = '';
                        for(var i=0;i<ps_data.length;i++){
                            var sqlStr = "INSERT INTO "+table_name+"(Time,TagName,PV) VALUES";
                            var str = formatDate(ps_data[i].time);
                            var strTime = "'"+str+"'";
                            var val = strTime+","+"'"+sql_tagname[i]+"'"+","+ps_data[i].value;
                            sqlStr += "("+val+")";
                            sqlStr = sqlStr + ";";
                            tSql += sqlStr;
                    }
                    //(function(done,tSql){
                    var expected = {meta:null,rowcount:1};
                    compoundQueryTSQL(Connection, tSql,ps_data.length,expected,done);
                   // })(done,tSql);
                    }else{
                        logger.warn("暂无无数据");
                        done("无数据！",null);
                    }
                },
                function( done ) {
                    Connection.commit( function( err ) { 
                        if(err){
                            done(err);
                            //lock= false;
                           // return;
                        }else{
                           // lock =false;
                            logger.info("提交成功!");
                            // return;
                            done(); 

                        }
                    });
                }
            ],function(err,results){
                if(err){
                    logger.error("数据插入失败,回滚!");
                    Connection.rollback( function( err ) { 
                        assert.ifError( err );
                        //lock = false;
                        //return;
                    });
                    done(err);
                }else{
                    done();
                }
            });
        }
        
     });

}

function updateData(Connection,ps_data,table_name,sql_tagname,logger,done){
    Connection.beginTransaction( function( err) { 
        if(err){
            done(err);
        }else{
           async.series( [
            function( done ) { 
                logger.info("正在更新数据");
                if(ps_data.length!=0){
                    var tSql = '';
                    for(var i=0;i<ps_data.length;i++){
                        var updateSql = "update "+table_name+" set "+table_name+".PV = ";
                        var str = formatDate(ps_data[i].time);
                        var strTime = "'"+str+"'";
                        updateSql = updateSql+ps_data[i].value+","+""+table_name+".Time="+strTime+" where "+table_name+".TagName="+"'"+sql_tagname[i]+"';";
                        tSql += updateSql;
                    }
                    var expected = {meta:null,rowcount:1};
                    compoundQueryTSQL(Connection, tSql,ps_data.length,expected,done);

                }else{
                    logger.warn("无数据");
                     //lock = false;
                     done("无数据！",null);
                     //return;
                     
                }
            },
            function( done ) {
                Connection.commit( function( err ) { 
                    if(err){
                        done(err);
                    }else{
                       logger.trace("更新提交数据完毕！");
                    //return;
                        done(); 
                    }
                    
                });
            }
            ],function(err,results){
                if(err){
                    //lock = false;
                    logger.info("数据回滚!");
                        Connection.rollback( function(err){ 
                            assert.ifError( err );
                            //return;
                        });
                    done(err);
                }else{
                   // lock = false;
                    done();
                }
            }); 
        }
        
    });
}
module.exports.compoundQueryTSQL = compoundQueryTSQL;
module.exports.execQuerySql = execQuerySql;
module.exports.insertData = insertData;
module.exports.updateData = updateData;



