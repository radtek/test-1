var bits = require('BitArray');
var assert = require( 'assert' );
var async = require('async');
var util = require( 'util' );
var configure = require('configure');
var iconv = require('iconv-lite');
var writeDebugComments = false;
var dataComparisonFailed = "Results do not match expected values";
//   non-optional message 
function errorComments(Message) {
    console.log(Message);
};

//   optional debugging information
function debugComments(Message) {
    if (writeDebugComments == true)
        errorComments(Message);
};

function dataComparisonFailedMessage(expected, actual, done) {
    errorComments("\nExpected: \n" + util.inspect(expected));
    errorComments("\nReceived: \n" + util.inspect(actual));
    done(new Error("\nxxxTEST FAILED"));
};
function Appendzero(obj)
{
     if(obj<10) return "0" +""+ obj;
     else return obj;     
}
function Append3zero(obj)
{
     if(obj<100) return "0" +""+ obj;
     else return obj;     
}
var formatDate = function(now){
    var   year=now.getFullYear();     
    var   month=now.getMonth()+1;     
    var   date=now.getDate();     
    var   hour=now.getHours();     
    var   minute=now.getMinutes();    
    var   second=now.getSeconds(); 
    var   milSecond = now.getMilliseconds(); 
    //console.log("milsecond:",milSecond);    
    return   year+"-"+Appendzero(month)+"-"+Appendzero(date)+" "+Appendzero(hour)+":"+Appendzero(minute)+":"+Appendzero(second)+"."+Append3zero(milSecond);     
}
function judgeExecSql(Connection,sql,logger,done){
    Connection.queryRaw(sql,function(err,cnt){
     if(err){
        logger.error("执行判断sql语句失败：",err);
        done(err);
      }else{
        //logger.trace("判断是否存在实时表");
        sql = null;
        done(null,cnt.rows[0][0]);
      }
    });
}
function execQuerySql(Connection,sql,logger,done){
    Connection.queryRaw(sql,function(err){
        if(err){
            console.log(sql);
            logger.error("sql执行失败:",err);
            done(err);
        }else{
            sql = undefined;
            done();
        }
    });
}

//将数据拆分成32位，保存在数组中
function int2bits(number){
  var arr = bits.parse(number);
  var bitsArr = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
  if(arr.length>32){
    logger.error("数据非法，无法拆分");
    return false;
  }
  if(arr.length<32){
    var j = 31;
    for(var i=arr.length-1;i>=0;i--){
      if(arr[i]==1){
        bitsArr[j]=1;
      }
      --j;
    }
  }
  return bitsArr.reverse();
}
function alarmAddress(valBits,data,name,ifAlarm){
    var address = [];
    for(var i in data[name]["bit"]){
        if(valBits[i]==ifAlarm){
            address.push(i);
        }
    }
    return address;
}
function realBits2Table(Connection,data,name,valueBits,time,logger,done){
    var name1 = name.substring(1);
    var position1 = name1.indexOf('\/');
    var fengChang_name = name1.substring(0,position1);
    //var fengChang_name_buffer = new Buffer(fengChang_name_utf, 'binary');
    //var fengChang_name = iconv.decode(fengChang_name_buffer, 'gbk');
    var position2 = name1.lastIndexOf('\/');
    var fengJi_name = name1.substring(position1+1,position2);
    //var fengJi_name_buffer = new Buffer(fengJi_name_utf, 'binary');
    //var fengJi_name = iconv.decode(fengJi_name_buffer, 'gbk');
    var str = formatDate(time);
    var strTime = "'"+str+"'";
    var addressAlarm = alarmAddress(valueBits,data,name,configure.alarm);
    if(addressAlarm.length>0){
        for(var idx in addressAlarm){
            var isRealExists = "if not exists(select * from "+configure.real_table+" where 风场名称 ='"+fengChang_name+"'"+" and 风机名称='"+fengJi_name+"'"+" and 时间=convert(datetime,"+strTime+",21)"+" and 故障描述='"+data[name]["error"][idx]+"') ";
            var isHisExists = "if not exists(select * from "+configure.his_table+" where 风场名称='"+fengChang_name+"'"+" and 风机名称='"+fengJi_name+"'"+" and 时间=convert(datetime,"+strTime+",21)"+" and 报警状态='"+"报警产生"+"'"+" and 故障描述='"+data[name]["error"][idx]+"') ";
            var insertReal = "insert into "+configure.real_table+"(风场名称,风机名称,时间,故障描述) values('"+fengChang_name+"'"+",'"+fengJi_name+"',"+"convert(datetime,"+strTime+",21),'"+data[name]["error"][idx]+"'"+") ";
            var insertHis = "insert into "+configure.his_table+"(风场名称,风机名称,时间,报警状态,故障描述) values('"+fengChang_name+"'"+",'"+fengJi_name+"',"+"convert(datetime,"+strTime+",21),"+"'报警产生',"+"'"+data[name]["error"][idx]+"'"+");";
            var realSqlStr = isRealExists+insertReal;
            var hisSqlStr = isHisExists+insertHis;
            var sqlStr = realSqlStr+hisSqlStr;
            //console.log(sqlStr);
            execQuerySql(Connection,sqlStr,logger,done);
        }
        
    }else{
        logger.info("初始化未发现报警.");
    } 

}
function updateTable(Connection,data,name,valueBits,time,logger,done){
    var name1 = name.substring(1);
    var position1 = name1.indexOf('\/');
    var fengChang_name = name1.substring(0,position1);
    //var fengChang_name_buffer = new Buffer(fengChang_name_utf, 'binary');
    //var fengChang_name = iconv.decode(fengChang_name_buffer, 'gbk');
    var position2 = name1.lastIndexOf('\/');
    var fengJi_name = name1.substring(position1+1,position2);
    //var fengJi_name_buffer = new Buffer(fengJi_name_utf, 'binary');
    //var fengJi_name = iconv.decode(fengJi_name_buffer, 'gbk');
    var str = formatDate(time);
    var strTime = "'"+str+"'";
    for(var idx in data[name]["bit"]){
        if(valueBits[idx]==configure.alarm){
            //产生报警，同一个点还没有恢复又一次产生的数据是报警，忽略，不存在这样一个点，添加报警
            var isExistsReal = "if not exists(select * from "+configure.real_table+" where 风场名称 ='"+fengChang_name+"'"+" and 风机名称='"+fengJi_name+"'"+" and 故障描述='"+data[name]["error"][idx]+"') ";
            var isExistsHis = "if not exists(select * from "+configure.his_table+" where 风场名称 ='"+fengChang_name+"'"+" and 风机名称='"+fengJi_name+"'"+" and 时间=convert(datetime,"+strTime+",21)"+" and 报警状态='"+"报警产生"+"'"+" and 故障描述='"+data[name]["error"][idx]+"') ";
            var insertReal = "insert into "+configure.real_table+"(风场名称,风机名称,时间,故障描述) values('"+fengChang_name+"'"+",'"+fengJi_name+"',"+"convert(datetime,"+strTime+",21),'"+data[name]["error"][idx]+"'"+") ";
            var insertHis = "insert into "+configure.his_table+"(风场名称,风机名称,时间,报警状态,故障描述) values('"+fengChang_name+"'"+",'"+fengJi_name+"',"+"convert(datetime,"+strTime+",21),"+"'报警产生',"+"'"+data[name]["error"][idx]+"'"+") ";
            var realSqlStr = isExistsReal+insertReal;
            var hisSqlStr = isExistsHis+ insertHis;
            var sqlStr = realSqlStr+hisSqlStr;
            execQuerySql(Connection,sqlStr,logger,done);

        }else{
            // 恢复报警:1.是否产生过这个报警，产生过删除报警2.判断是否有这条数据，没有就添加到历史
            var isExitAlarm = "if exists(select * from "+configure.real_table+" where 风场名称 ='"+fengChang_name+"'"+" and 风机名称='"+fengJi_name+"'"+" and 故障描述='"+data[name]["error"][idx]+"'"+") ";
            var deleteAlarm = "delete from "+configure.real_table+" where 风场名称 ='"+fengChang_name+"'"+" and 风机名称='"+fengJi_name+"'"+" and 故障描述='"+data[name]["error"][idx]+"' ";
            
            var isNormal = "if not exists(select * from "+configure.his_table+" where 风场名称 ='"+fengChang_name+"'"+" and 风机名称='"+fengJi_name+"'"+" and 时间=convert(datetime,"+strTime+",21)"+" and 报警状态='"+"报警恢复"+"'"+" and 故障描述='"+data[name]["error"][idx]+"'"+") ";
            var isExitHisAlarm = "if exists(select * from "+configure.his_table+" where 风场名称 ='"+fengChang_name+"'"+" and 风机名称='"+fengJi_name+"'"+" and 报警状态='"+"报警产生"+"'"+" and 故障描述='"+data[name]["error"][idx]+"'"+") ";
            var insertHis = "insert into "+configure.his_table+"(风场名称,风机名称,时间,报警状态,故障描述) values('"+fengChang_name+"'"+",'"+fengJi_name+"',"+"convert(datetime,"+strTime+",21),"+"'报警恢复',"+"'"+data[name]["error"][idx]+"'"+");";
            var realSql = isExitAlarm+deleteAlarm;
            var hisSql = isNormal+isExitHisAlarm+insertHis;
            var sqlStr = realSql+hisSql;
            execQuerySql(Connection,sqlStr,logger,done)
        }
    }   
}
function initTable(Connection,curValue,logger,data,dataKeys,done){
    for(var i in curValue){
        for(var j in dataKeys){
            if(curValue[i].name==dataKeys[j]){
                var valueBits = int2bits(curValue[i].value.value);
                if(valueBits){
                    logger.info("初始化实时表,历史表");
                    realBits2Table(Connection,data,curValue[i].name,valueBits,curValue[i].value.time,logger,done);
                    //return;/////
                }
            }
        }
    }
}
function update(Connection,curValue,logger,data,dataKeys,done){
   for(var i in curValue){
        for(var j in dataKeys){
            if(curValue[i].name==dataKeys[j]){
                var valueBits = int2bits(curValue[i].value.value);
                if(valueBits){
                    logger.info("更新实时表,历史表");
                    updateTable(Connection,data,curValue[i].name,valueBits,curValue[i].value.time,logger,done);   
                }
            }
        }
    } 
}
module.exports.execQuerySql = execQuerySql;
module.exports.judgeExecSql = judgeExecSql;
module.exports.initTable = initTable;
module.exports.update = update;


