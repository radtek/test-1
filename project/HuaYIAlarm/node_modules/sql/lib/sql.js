var bits = require('BitArray');
var assert = require( 'assert' );
var async = require('async');
var util = require( 'util' );
var configure = require('configure');
var iconv = require('iconv-lite');
var writeDebugComments = false;
var dataComparisonFailed = "Results do not match expected values";
//   non-optional message 
function errorComments(Message) {
    console.log(Message);
};

//   optional debugging information
function debugComments(Message) {
    if (writeDebugComments == true)
        errorComments(Message);
};

function dataComparisonFailedMessage(expected, actual, done) {
    errorComments("\nExpected: \n" + util.inspect(expected));
    errorComments("\nReceived: \n" + util.inspect(actual));
    done(new Error("\nxxxTEST FAILED"));
};
function Appendzero(obj)
{
     if(obj<10) return "0" +""+ obj;
     else return obj;     
}
function Append3zero(obj)
{
     if(obj<100) return "0" +""+ obj;
     else return obj;     
}
var formatDate = function(now){
    var   year=now.getFullYear();     
    var   month=now.getMonth()+1;     
    var   date=now.getDate();     
    var   hour=now.getHours();     
    var   minute=now.getMinutes();    
    var   second=now.getSeconds(); 
    var   milSecond = now.getMilliseconds(); 
    //console.log("milsecond:",milSecond);    
    return   year+"-"+Appendzero(month)+"-"+Appendzero(date)+" "+Appendzero(hour)+":"+Appendzero(minute)+":"+Appendzero(second)+"."+Append3zero(milSecond);     
}
var formatDate = function(now){
    var   year=now.getFullYear();     
    var   month=now.getMonth()+1;     
    var   date=now.getDate();     
    var   hour=now.getHours();     
    var   minute=now.getMinutes();    
    var   second=now.getSeconds(); 
    var   milSecond = now.getMilliseconds(); 
    return   year+"-"+Appendzero(month)+"-"+Appendzero(date)+" "+Appendzero(hour)+":"+Appendzero(minute)+":"+Appendzero(second);     
}
function judgeExecSql(Connection,sql,logger,done){
    Connection.queryRaw(sql,function(err,cnt){
     if(err){
        logger.error("执行判断sql语句失败：",err);
        done(err);
      }else{
        //logger.trace("判断是否存在实时表");
        done(null,cnt.rows[0][0]);
      }
    });
}
function Exec2Sql(Connection,sql,logger,done){
    Connection.queryRaw(sql[0],function(err,cnt){
     if(err){
        logger.error("执行判断sql语句1失败：",err);
        done(err);
      }else{
        Connection.queryRaw(sql[1],function(err,cnt){
         if(err){
            logger.error("执行判断sql语句2失败：",err);
            done(err);
          }else{
           done();
          }
        });
       
      }
    });
}
function judge2ExecSql(Connection,sql,logger,done){
    async.series([
        function(done){
            Connection.queryRaw(sql[0],function(err,cnt){
             if(err){
                logger.error("执行判断sql语句失败：",err);
                done(err);
              }else{
                //logger.trace("判断是否存在实时表");
                done(null,cnt.rows[0][0]);
              }
            });
        },
        function(done){
            Connection.queryRaw(sql[1],function(err,cnt){
             if(err){
                logger.error("执行判断sql语句失败：",err);
                done(err);
              }else{
                //logger.trace("判断是否存在实时表");
                done(null,cnt.rows[0][0]);
              }
            });
        }
        ],function(err,result){
            if(err){
                logger.error("对数组中的sql语句执行有失败的数据:",err);
                done(err);
            }else{
                done(null,result);
            }
    });
}
function judge3ExecSql(Connection,sql,logger,done){
    async.series([
        function(done){
            Connection.queryRaw(sql[0],function(err,cnt){
             if(err){
                logger.error("执行判断sql语句失败：",err);
                done(err);
              }else{
                //logger.trace("判断是否存在实时表");
                done(null,cnt.rows[0][0]);
              }
            });
        },
        function(done){
            Connection.queryRaw(sql[1],function(err,cnt){
             if(err){
                logger.error("执行判断sql语句失败：",err);
                done(err);
              }else{
                //logger.trace("判断是否存在实时表");
                done(null,cnt.rows[0][0]);
              }
            });
        },
        function(done){
            Connection.queryRaw(sql[2],function(err,cnt){
             if(err){
                logger.error("执行判断sql语句失败：",err);
                done(err);
              }else{
                //logger.trace("判断是否存在实时表");
                done(null,cnt.rows[0][0]);
              }
            });
        }
        ],function(err,result){
            if(err){
                logger.error("对数组中的sql语句执行有失败的数据:",err);
                done(err);
            }else{
                done(null,result);
            }
    });
}
function execQuerySql(Connection,sql,logger,done){
    Connection.queryRaw(sql,function(err){
        if(err){
            logger.error("sql执行失败:",err);
            done(err);
        }else{
            done();
        }
    });
}
function compoundQueryTSQL(Connection, tsql,len,ExpectedData,done) {
    var NewExpectedData = ExpectedData;
    var called = 0;
    Connection.queryRaw(tsql, [], function (e, r, more) {
        if(e){
            //console.log(tsql);
            console.log(e);
            done(e);
        }else{
            
            ++called;
            if (more) {
                try {
                    assert.deepEqual(r, NewExpectedData, dataComparisonFailed);
                }
                catch (assert) {
                    dataComparisonFailedMessage(NewExpectedData, r, done);
                    return;
                }
            }
            else {
                try {
                    assert.deepEqual(r, NewExpectedData, dataComparisonFailed);
                }
                catch (assert) {
                    dataComparisonFailedMessage(NewExpectedData, r, done);
                    return;
                }
            }
            if (called > len-1) {
                done();
            }
        }
        
    });
}

//将数据拆分成32位，保存在数组中
function int2bits(number){
  var arr = bits.parse(number);
  var bitsArr = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
  if(arr.length>32){
    logger.error("数据非法，无法拆分");
    return false;
  }
  if(arr.length<32){
    var j = 31;
    for(var i=arr.length-1;i>=0;i--){
      if(arr[i]==1){
        bitsArr[j]=1;
      }
      --j;
    }
  }
  return bitsArr.reverse();
}
function alarmAddress(valBits,data,name,ifAlarm){
    var address = [];
    for(var i in data[name]["bit"]){
        if(valBits[i]==ifAlarm){
            address.push(i);
        }
    }
    return address;
}
function realBits2Table(Connection,data,name,valueBits,time,logger,done){
    var name1 = name.substring(1);
    var position1 = name1.indexOf('\/');
    var fengChang_name_utf = name1.substring(0,position1);
    var fengChang_name_buffer = new Buffer(fengChang_name_utf, 'binary');
    var fengChang_name = iconv.decode(fengChang_name_buffer, 'gbk');
    var position2 = name1.lastIndexOf('\/');
    var fengJi_name_utf = name1.substring(position1+1,position2);
    var fengJi_name_buffer = new Buffer(fengJi_name_utf, 'binary');
    var fengJi_name = iconv.decode(fengJi_name_buffer, 'gbk');
    var str = formatDate(time);
    var strTime = "'"+str+"'";
    var addressAlarm = alarmAddress(valueBits,data,name,configure.alarm);
    if(addressAlarm.length>0){
        async.series([
            function(done){
                for(var i in addressAlarm){
                    //产生了报警，插入实时表，数据存在更新，不存在插入
                      (function(idx,i){
                        async.waterfall([
                            function(done){
                                var judge = [];
                                var state = '报警产生';
                                judge[0] = "select count(1) from "+configure.real_table+" where 风场名称 ='"+fengChang_name+"'"+" and 风机名称='"+fengJi_name+"'"+" and 时间=convert(datetime,"+strTime+",21)"+" and 故障描述='"+data[name]["error"][idx]+"'"+";";
                                judge[1] = "select count(1) from "+configure.his_table+" where 风场名称 ='"+fengChang_name+"'"+" and 风机名称='"+fengJi_name+"'"+" and 时间=convert(datetime,"+strTime+",21)"+" and 报警状态='"+state+"'"+" and 故障描述='"+data[name]["error"][idx]+"'"+";";
                                judge2ExecSql(Connection,judge,logger,done); 
                            },
                            function(cnt,done){
                                if(cnt[0]==0 && cnt[1]==0){
                                    //插入实时
                                    var sqlArr = [];
                                    sqlArr[0] = "insert into "+configure.real_table+"(风场名称,风机名称,时间,故障描述) values('"+fengChang_name+"'"+",'"+fengJi_name+"',"+"convert(datetime,"+strTime+",21),'"+data[name]["error"][idx]+"'"+");";
                                    sqlArr[1] = "insert into "+configure.his_table+"(风场名称,风机名称,时间,报警状态,故障描述) values('"+fengChang_name+"'"+",'"+fengJi_name+"',"+"convert(datetime,"+strTime+",21),"+"'报警产生',"+"'"+data[name]["error"][idx]+"'"+");";
                                    Exec2Sql(Connection,sqlArr,logger,done);
                                   
                                }else if(cnt[0]==1 && cnt[1]==0){
                                    var insertStr1 = "insert into "+configure.his_table+"(风场名称,风机名称,时间,报警状态,故障描述) values('"+fengChang_name+"'"+",'"+fengJi_name+"',"+"convert(datetime,"+strTime+",21),"+"'报警产生',"+"'"+data[name]["error"][idx]+"'"+");";  
                                    execQuerySql(Connection,insertStr1,logger,done);
                                   
                                }else if(cnt[0]==0 && cnt[1]==1){
                                    var insertStr = "insert into "+configure.real_table+"(风场名称,风机名称,时间,故障描述) values('"+fengChang_name+"'"+",'"+fengJi_name+"',"+"convert(datetime,"+strTime+",21),'"+data[name]["error"][idx]+"'"+");";
                                    execQuerySql(Connection,insertStr,logger,done)
                                }else{
                                    done();
                                }
                            }
                        ],function(err,result){
                            if(err){
                                logger.error("数据插入失败");
                                done("数据插入失败");
                            }else{
                                logger.trace("本条数据操作成功.");
                                done();
                            }
                        });
                    })(addressAlarm[i],i);
                }
            }
            ],function(err,result){       
        });
    }else{
        logger.info("初始化未发现报警.");
    } 

}
function updateTable(Connection,data,name,valueBits,time,logger,done){
    var name1 = name.substring(1);
    var position1 = name1.indexOf('\/');
    var fengChang_name_utf = name1.substring(0,position1);
    var fengChang_name_buffer = new Buffer(fengChang_name_utf, 'binary');
    var fengChang_name = iconv.decode(fengChang_name_buffer, 'gbk');
    var position2 = name1.lastIndexOf('\/');
    var fengJi_name_utf = name1.substring(position1+1,position2);
    var fengJi_name_buffer = new Buffer(fengJi_name_utf, 'binary');
    var fengJi_name = iconv.decode(fengJi_name_buffer, 'gbk');
    var str = formatDate(time);
    var strTime = "'"+str+"'";
    for(var i in data[name]["bit"]){
        if(valueBits[i]==configure.alarm){
            //产生报警，同一个点还没有恢复又一次产生的数据是报警，忽略，不存在这样一个点，添加报警
            (function(idx){
                async.waterfall([
                    function(done){
                        var judge = [];
                        var state = '报警产生';
                        judge[0] = "select count(1) from "+configure.real_table+" where 风场名称 ='"+fengChang_name+"'"+" and 风机名称='"+fengJi_name+"'"+" and 故障描述='"+data[name]["error"][idx]+"'"+";";
                        judge[1] = "select count(1) from "+configure.his_table+" where 风场名称 ='"+fengChang_name+"'"+" and 风机名称='"+fengJi_name+"'"+" and 时间=convert(datetime,"+strTime+",21)"+" and 报警状态='"+state+"'"+" and 故障描述='"+data[name]["error"][idx]+"'"+";";
                        judge2ExecSql(Connection,judge,logger,done); 
                    },
                    function(cnt,done){
                        if(cnt[0]==0&&cnt[1]==0){
                            var sqlArr = [];
                            sqlArr[0] = "insert into "+configure.real_table+"(风场名称,风机名称,时间,故障描述) values('"+fengChang_name+"'"+",'"+fengJi_name+"',"+"convert(datetime,"+strTime+",21),'"+data[name]["error"][idx]+"'"+");";
                            sqlArr[1] = "insert into "+configure.his_table+"(风场名称,风机名称,时间,报警状态,故障描述) values('"+fengChang_name+"'"+",'"+fengJi_name+"',"+"convert(datetime,"+strTime+",21),"+"'报警产生',"+"'"+data[name]["error"][idx]+"'"+");";
                            Exec2Sql(Connection,sqlArr,logger,done);
                        }else if(cnt[0]==0&&cnt[1]==1){
                            var insertStr = "insert into "+configure.real_table+"(风场名称,风机名称,时间,故障描述) values('"+fengChang_name+"'"+",'"+fengJi_name+"',"+"convert(datetime,"+strTime+",21),'"+data[name]["error"][idx]+"'"+");";
                            execQuerySql(Connection,insertStr,logger,done)
                        }else if(cnt[0]==1&&cnt[1]==0){
                            var insertStr1 = "insert into "+configure.his_table+"(风场名称,风机名称,时间,报警状态,故障描述) values('"+fengChang_name+"'"+",'"+fengJi_name+"',"+"convert(datetime,"+strTime+",21),"+"'报警产生',"+"'"+data[name]["error"][idx]+"'"+");";  
                            execQuerySql(Connection,insertStr1,logger,done);
                        }else{
                            done();
                        }
                    }
                    ],function(err,result){
                    if(err){
                        logger.error("产生报警时更新数据失败.");
                        done(err);
                    }else{
                        logger.trace("产生报警时更新数据成功.");
                        done();
                    }
                });
            })(i);

        }else{
            // 恢复报警:1.是否产生过这个报警，产生过删除报警2.判断是否有这条数据，没有就添加到历史
            (function(idx){
                async.waterfall([
                    function(done){
                        var judge = [];
                        var state = '报警恢复';
                        judge[0] = "select count(1) from "+configure.real_table+" where 风场名称 ='"+fengChang_name+"'"+" and 风机名称='"+fengJi_name+"'"+" and 故障描述='"+data[name]["error"][idx]+"'"+";";
                        judge[1] = "select count(1) from "+configure.his_table+" where 风场名称 ='"+fengChang_name+"'"+" and 风机名称='"+fengJi_name+"'"+" and 时间=convert(datetime,"+strTime+",21)"+" and 报警状态='"+state+"'"+" and 故障描述='"+data[name]["error"][idx]+"'"+";";
                        judge[2] = "select count(1) from "+configure.his_table+" where 风场名称 ='"+fengChang_name+"'"+" and 风机名称='"+fengJi_name+"'"+" and 报警状态='"+"报警产生"+"'"+" and 故障描述='"+data[name]["error"][idx]+"'"+";";
                        judge3ExecSql(Connection,judge,logger,done); 
                    },
                    function(cnt,done){
                        //console.log(cnt);
                        if(cnt[0]==0&&cnt[1]==0&&cnt[2]>0){
                            //var sqlArr = [];
                            //sqlArr[0] = "insert into "+configure.real_table+"(风场名称,风机名称,时间,故障描述) values('"+fengChang_name+"'"+",'"+fengJi_name+"',"+"convert(datetime,"+strTime+",21),'"+data[name]["error"][idx]+"'"+");";
                            var sqlStr = "insert into "+configure.his_table+"(风场名称,风机名称,时间,报警状态,故障描述) values('"+fengChang_name+"'"+",'"+fengJi_name+"',"+"convert(datetime,"+strTime+",21),"+"'报警恢复',"+"'"+data[name]["error"][idx]+"'"+");";
                            execQuerySql(Connection,sqlStr,logger,done);
                        }else if(cnt[0]==1&&cnt[1]==0&&cnt[2]>0){
                            //删除实时报警，添加历史报警
                            var sqlArr = [];
                            sqlArr[0] = "delete from "+configure.real_table+" where 风场名称 ='"+fengChang_name+"'"+" and 风机名称='"+fengJi_name+"'"+" and 故障描述='"+data[name]["error"][idx]+"'"+";";
                            sqlArr[1] = "insert into "+configure.his_table+"(风场名称,风机名称,时间,报警状态,故障描述) values('"+fengChang_name+"'"+",'"+fengJi_name+"',"+"convert(datetime,"+strTime+",21),"+"'报警恢复',"+"'"+data[name]["error"][idx]+"'"+");";
                            Exec2Sql(Connection,sqlArr,logger,done);
                        }else if(cnt[0]==1){
                            //删除实时
                            var delStr = "delete from "+configure.real_table+" where 风场名称 ='"+fengChang_name+"'"+" and 风机名称='"+fengJi_name+"'"+" and 故障描述='"+data[name]["error"][idx]+"'"+";";
                            execQuerySql(Connection,delStr,logger,done);
                        }else{
                            done();
                        }
                    }
                    ],function(err,result){
                    if(err){
                        logger.error("产生报警时更新数据失败.");
                        done(err);
                    }else{
                        logger.trace("产生报警时更新数据成功.");
                        done();
                    }
                });
            })(i);
        }
    }   
}
function initTable(Connection,curValue,logger,data,dataKeys,done){
    for(var i in curValue){
        for(var j in dataKeys){
            if(curValue[i].name==dataKeys[j]){
                var valueBits = int2bits(curValue[i].value.value);
                if(valueBits){
                    logger.info("初始化实时表,历史表");
                    realBits2Table(Connection,data,curValue[i].name,valueBits,curValue[i].value.time,logger,done);
                }
            }
        }
    }
}
function update(Connection,curValue,logger,data,dataKeys,done){
   for(var i in curValue){
        for(var j in dataKeys){
            if(curValue[i].name==dataKeys[j]){
                var valueBits = int2bits(curValue[i].value.value);
                if(valueBits){
                    logger.info("更新实时表,历史表");
                    updateTable(Connection,data,curValue[i].name,valueBits,curValue[i].value.time,logger,done);
                }
            }
        }
    } 
}
module.exports.execQuerySql = execQuerySql;
module.exports.judgeExecSql = judgeExecSql;
module.exports.initTable = initTable;
module.exports.update = update;


