var bits = require('BitArray');
var assert = require( 'assert' );
var async = require('async');
var util = require( 'util' );
var sql = require('msnodesql');
var configure = require('configure');
var iconv = require('iconv-lite');
var poolModule = require('generic-pool')
var writeDebugComments = false;
var dataComparisonFailed = "Results do not match expected values";
//   non-optional message 
function errorComments(Message) {
    console.log(Message);
};

var pool = poolModule.Pool({
    name     : 'sqlserver',
    create   : function(callback) {
         sql.open(configure.sqlserver, function( err, sqlCon) {
            if(err){
                console.log(err);
                callback(err,null);
            }else{
                callback(null,sqlCon);
            }
         });
    },
    destroy  : function(client) { client.close(); },
    max      : configure.MAX,
    // optional. if you set this, make sure to drain() (see step 3)
    min      : configure.MIN, 
    // specifies how long a resource can stay idle in pool before being removed
    idleTimeoutMillis : configure.idleTimeoutMillis,
     // if true, logs via console.log - can also be a function
    log :false
});

//   optional debugging information
function debugComments(Message) {
    if (writeDebugComments == true)
        errorComments(Message);
};

function dataComparisonFailedMessage(expected, actual, done) {
    errorComments("\nExpected: \n" + util.inspect(expected));
    errorComments("\nReceived: \n" + util.inspect(actual));
    done(new Error("\nxxxTEST FAILED"));
};
function Appendzero(obj)
{
     if(obj<10) return "0" +""+ obj;
     else return obj;     
}
function Append3zero(obj)
{
     if(obj<100) return "0" +""+ obj;
     else return obj;     
}
var formatDate = function(now){
    var   year=now.getFullYear();     
    var   month=now.getMonth()+1;     
    var   date=now.getDate();     
    var   hour=now.getHours();     
    var   minute=now.getMinutes();    
    var   second=now.getSeconds(); 
    var   milSecond = now.getMilliseconds(); 
    //console.log("milsecond:",milSecond);    
    return   year+"-"+Appendzero(month)+"-"+Appendzero(date)+" "+Appendzero(hour)+":"+Appendzero(minute)+":"+Appendzero(second)+"."+Append3zero(milSecond);     
}
function judgeExecSql(Connection,sql,logger,done){
    Connection.queryRaw(sql,function(err,cnt){
     if(err){
        logger.error("执行判断sql语句失败：",err);
        done(err);
      }else{
        //logger.trace("判断是否存在实时表");
        sql = null;
        done(null,cnt.rows[0][0]);
      }
    });
}
function execInitQuerySql(Connection,sql,logger,done){
    Connection.queryRaw(sql,function(err){
        if(err){
            console.log(err);
            delete pool;
            console.log(sql);
            logger.error("初始化sql执行失败:",err);
            done(err);
        }else{
            sql = undefined;
            delete Connection;
            done();
        }
    });
           
}
function execQuerySql(Connection,sql,logger,done){
     Connection.queryRaw(sql[0],function(err){
        if(err){
            if(err.sqlstate!=23000){
                delete pool;
                sql = undefined;
                delete Connection;
                logger.error("sql执行失败:",err);
                done(err);
            }else{
                sql = undefined;
                delete Connection;
                done();
            }
        }else{
            Connection.queryRaw(sql[1],function(err){
                if(err){
                    delete pool;
                    sql = undefined;
                    delete Connection;
                    logger.error("插入历史失败:",err);
                    done(err);
                }else{
                    sql = undefined;
                    delete Connection;
                    done();
                }
            });
            
        }
    });
}
function execNormalQuerySql(Connection,sql,logger,done){
     Connection.queryRaw(sql[0],function(err,r){
        if(err){
            delete pool;
            logger.error("删除执行失败:",err);
            done(err);
        }else{
            if(r.rowcount==1){
                Connection.queryRaw(sql[1],function(err){
                    if(err){
                        delete pool;
                        logger.error("插入执行失败:",err);
                        done(err);
                    }else{
                        delete Connection;
                        done();
                    }
                });
            }else{
                done();
            }
        }
    });
}


function alarmAddress(valBits,data,name,ifAlarm){
    var address = [];
    for(var i in data[name]["bit"]){
        if(valBits[i]==ifAlarm){
            address.push(i);
        }
    }
    delete valBits;
    return address;
}

function realBits2Table(Connection,data,name,valueBits,time,logger,done){
    var name1 = name.substring(1);
    var position1 = name1.indexOf('\/');
    var fengChang_name = name1.substring(0,position1);
    //var fengChang_name_buffer = new Buffer(fengChang_name_utf, 'binary');
    //var fengChang_name = iconv.decode(fengChang_name_buffer, 'gbk');
    var position2 = name1.lastIndexOf('\/');
    var fengJi_name = name1.substring(position1+1,position2);
    //var fengJi_name_buffer = new Buffer(fengJi_name_utf, 'binary');
    //var fengJi_name = iconv.decode(fengJi_name_buffer, 'gbk');
    var str = formatDate(time);
    var strTime = "'"+str+"'";
    var addressAlarm = alarmAddress(valueBits,data,name,configure.alarm);
   // console.log(addressAlarm);
    var tSql = '';
    if(addressAlarm.length>0){
        for(var idx in addressAlarm){
            var isRealExists = "if not exists(select top 1 风场名称 from "+configure.real_table+" where 风场名称 ='"+fengChang_name+"'"+" and 风机名称='"+fengJi_name+"'"+" and 时间=convert(datetime,"+strTime+",21)"+" and 故障描述='"+data[name]["error"][addressAlarm[idx]]+"') ";
            var isHisExists = "if not exists(select top 1 风场名称 from "+configure.his_table+" where 风场名称='"+fengChang_name+"'"+" and 风机名称='"+fengJi_name+"'"+" and 时间=convert(datetime,"+strTime+",21)"+" and 报警状态='"+"报警产生"+"'"+" and 故障描述='"+data[name]["error"][addressAlarm[idx]]+"') ";
            var insertReal = "insert into "+configure.real_table+"(风场名称,风机名称,时间,故障描述) values('"+fengChang_name+"'"+",'"+fengJi_name+"',"+"convert(datetime,"+strTime+",21),'"+data[name]["error"][addressAlarm[idx]]+"'"+") ";
            var insertHis = "insert into "+configure.his_table+"(风场名称,风机名称,时间,报警状态,故障描述) values('"+fengChang_name+"'"+",'"+fengJi_name+"',"+"convert(datetime,"+strTime+",21),"+"'报警产生',"+"'"+data[name]["error"][addressAlarm[idx]]+"'"+");";
            var realSqlStr = isRealExists+insertReal;
            var hisSqlStr = isHisExists+insertHis;
            var sqlStr = realSqlStr+hisSqlStr;
            //console.log(sqlStr);
            tSql+=sqlStr;
        }
        data = undefined;
        pool.acquire(function(err, client) {
            if (err) {
               done(err);
            }else {
                //execQuerySql(client,tSql,logger,done); 
                setImmediate(execInitQuerySql,client,tSql,logger,done);
                pool.release(client); 
            }
        });
    }else{
        logger.info("初始化未发现报警.");
    } 

}
function updateTable(Connection,data,name,valueBits,time,logger,done){
    var name1 = name.substring(1);
    var position1 = name1.indexOf('\/');
    var fengChang_name = name1.substring(0,position1);
    var position2 = name1.lastIndexOf('\/');
    var fengJi_name = name1.substring(position1+1,position2);
    var str = formatDate(time);
    var strTime = "'"+str+"'";
    var tSql = '';
    for(var idx in data[name]["bit"]){
        if(valueBits[idx]==configure.alarm){
            var sqlArr = [];
            sqlArr[0] = "insert into "+configure.real_table+"(风场名称,风机名称,时间,故障描述) values('"+fengChang_name+"'"+",'"+fengJi_name+"',"+"convert(datetime,"+strTime+",21),'"+data[name]["error"][idx]+"'"+") ";
            sqlArr[1] = "insert into "+configure.his_table+"(风场名称,风机名称,时间,报警状态,故障描述) values('"+fengChang_name+"'"+",'"+fengJi_name+"',"+"convert(datetime,"+strTime+",21),"+"'报警产生',"+"'"+data[name]["error"][idx]+"'"+") ";
            pool.acquire(function(err, client) {
                if (err) {
                   done(err);
                }else {
                    setImmediate(execQuerySql,client,sqlArr,logger,done); 
                    pool.release(client); 
                }
            });
        }else{
            // 恢复报警:1.是否产生过这个报警，产生过删除报警2.判断是否有这条数据，没有就添加到历史
            //var isExitAlarm = "if exists(select top 1 风场名称 from "+configure.real_table+" where 风场名称 ='"+fengChang_name+"'"+" and 风机名称='"+fengJi_name+"'"+" and 故障描述='"+data[name]["error"][idx]+"'"+") begin ";
            var sqlArr = [];
            sqlArr[0] = "delete from "+configure.real_table+" where 风场名称 ='"+fengChang_name+"'"+" and 风机名称='"+fengJi_name+"'"+" and 故障描述='"+data[name]["error"][idx]+"' ";
            sqlArr[1] = "insert into "+configure.his_table+"(风场名称,风机名称,时间,报警状态,故障描述) values('"+fengChang_name+"'"+",'"+fengJi_name+"',"+"convert(datetime,"+strTime+",21),"+"'报警恢复',"+"'"+data[name]["error"][idx]+"'"+") ";
           // var sqlStr = isExitAlarm+deleteAlarm+insertHis;
            pool.acquire(function(err, client) {
                if (err) {
                   done(err);
                }else {
                    setImmediate(execNormalQuerySql,client,sqlArr,logger,done); 
                    pool.release(client); 
                }
            });
            delete sqlArr; 
        }
    } 
    name = undefined;
    fengChang_name = undefined;
    fengJi_name = undefined;
    strTime = undefined;
    delete data;
    time = undefined;
    delete valueBits;
    data = undefined;
    
    //logger.trace(tSql);
    //execQuerySql(Connection,tSql,logger,done);
    //setTimeout(execQuerySql,2000,Connection,tSql,logger,done);
    //compoundQueryTSQL(Connection,tSql,done); 
}


module.exports.execQuerySql = execInitQuerySql;
module.exports.judgeExecSql = judgeExecSql;
module.exports.initTable = realBits2Table;
module.exports.update = updateTable;


