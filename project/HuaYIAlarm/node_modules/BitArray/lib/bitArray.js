var csv = require("csv");
var fs = require('fs');
function BitArray(){
	this.parse = parse;
	this.octet = octet;
  this.readFile = readFile;
}

BitArray.octet = function(arr) {
  var len = arr.length
    , fill = len + (8 - len % 8)
  
  if (len !== 0 && len % 8 === 0) {
    return arr
  }
  for (var i = len; i < fill; i++) {
    arr[i] = 0
  }
  return arr
}

BitArray.parse=function(x, oct) {
  var bits = []
    , tmp = x

  if (typeof x === 'undefined') {
    return bits
  }
  // Check for binary string
  if (typeof x === 'string') {
    for (var i = 0; i < x.length; i++) {
      bits.push(+x[i])
    }
    return bits.reverse()
  }
  // Check for single 32bit integer
  if (typeof x === 'number') {
    while (tmp > 0) {
      bits.push(tmp % 2)
      tmp = Math.floor(tmp / 2)
    }
    oct && (bits = BitArray.octet(bits))
    return bits.reverse()
  }
  // Check for direct bit array
  if (Array.isArray(x)) {
    return x
  }
  // Assumed to be array / buffer of 32bit integers
  for (var i = 0; i < x.length; i++) {
    bits = bits.concat(BitArray.parse(x[i], true))
  }
  return bits
}
BitArray.readFile = function(path,logger,cb){
  csv().from.path(path,{columns:true,encoding: 'binary'})
  .transform(function(configData,index){return configData;})
  .to.array(function(configData){ cb(null,configData);})
  .on('close', function(count){logger.info(" 配置文件关闭!");})
  .on('error', function(error){cb(error.message,null);logger.error("配置文件读取错误:",error.message);}); 
}
module.exports = BitArray;